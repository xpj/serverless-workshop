
service: event-driven-app

provider:
  name: aws
  runtime: nodejs6.10
  # Step 3. In this_file, add the database table name to the service's `environment` variables. The `aws-sdk` will need to know the table name in order to access the table
  # Step 2. In this_file, add a new IAM role the lambda function needs in order to access the newly created dynamoDB table.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:Scan
      Resource: { Fn::GetAtt: [ myDynamoTable, Arn ] }
  environment:
    # Here we reference the table name defined below. This is a cloud formation ref
    MY_TABLE: { Ref: myDynamoTable }

functions:
  create:
    handler: handler.create
    events:
      - http:
          path: create
          method: post
          cors: true
  scan:
    handler: handler.scan
    events:
      - http:
          path: scan
          method: post
          cors: true

# Step 1. Add the DynamoDB CloudFormation in `readme.md` to the `resources` block of this_file #
resources:
  Resources:
    myDynamoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: 'my-table-name'
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1